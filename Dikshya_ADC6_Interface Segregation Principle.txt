The Interface Segregation Principle was defined by Robert C. Martin while consulting for
Xerox to help them build the software for their new printer systems. He defined it as:

“Clients should not be forced to depend upon interfaces that they do not use.”

Sounds obvious, doesn’t it? Well, as I will show you in this article, it’s pretty easy
to violate this interface, especially if your software evolves and you have to add 
more and more features. But more about that later.

Similar to the Single Responsibility Principle, the goal of the Interface Segregation 
Principle is to reduce the side effects and frequency of required changes by splitting 
the software into multiple, independent parts.

As I will show you in the following example, this is only achievable if you define your 
interfaces so that they fit a specific client or task.

we know that we also have solid shapes, so since we would also want to calculate the 
volume of the shape, we can add another contract to the ShapeInterface:

interface ShapeInterface {
    public function area();
    public function volume();
}
Any shape we create must implement the volume method, but we know that squares are flat 
shapes and that they do not have volumes, so this interface would force the Square class to 
implement a method that it has no use of.

ISP says no to this, instead you could create another interface called SolidShapeInterface that 
has the volume contract and solid shapes like cubes e.t.c can implement this interface:

interface ShapeInterface {
    public function area();
}

interface SolidShapeInterface {
    public function volume();
}

class Cuboid implements ShapeInterface, SolidShapeInterface {
    public function area() {
        // calculate the surface area of the cuboid
    }

    public function volume() {
        // calculate the volume of the cuboid
    }
}
This is a much better approach, but a pitfall to watch out for is when type-hinting these interfaces, 
instead of using a ShapeInterface or a SolidShapeInterface.