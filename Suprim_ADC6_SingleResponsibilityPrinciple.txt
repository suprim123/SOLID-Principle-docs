The name of the principle says it all:

“One class should have one and only one responsibility”

In other words, we should write, change and maintain a class
for only one purpose. If it is model class then it should strictly
represent only one actor/ entity. This will give we the flexibility
to make changes in future without worrying the impacts of changes for
another entity.
Similarly, If we are writing service/manager class then it should contain
only that part of method calls and nothing else. Not even utility global 
functions related to module. Better separate them in another globally accessible
class file. This will help in maintaining the class for that particular purpose, 
and we can decide the visibility of class to specific module only.

The single responsibility principle provides another substantial benefit. 
Classes,software components and microservices that have only one responsibility 
are much easier to explain, understand and implement than the ones that provide
a solution for everything. This reduces the number of bugs, improves your development 
speed, and makes your life as a software developer a lot easier.

Single Responsibility Principle Example

In given example, we have two classes Person and Account. Both have single
responsibility to store their specific information. If we want to change 
state of Person then we do not need to modify the class Account and vice-versa.

Person.java
public class Person 
{
    private Long personId;
    private String firstName;
    private String lastName;
    private String age;
    private List<Account> accounts;
}
Account.java
public class Account 
{
    private Long guid;
    private String accountNumber;
    private String accountName;
    private String status;
    private String type;
}